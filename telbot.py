from datetime import datetime, timedelta
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
from telegram.ext import JobQueue
from datetime import datetime, time, timedelta

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_daily_notification(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
    job = context.job
    user_id = job.data['user_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data_dict:
        logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    user_data = user_data_dict[user_id]
    current_day = calculate_cycle_day(user_data)
    current_phase = determine_phase(current_day, user_data)
    
    recommendations = RECOMMENDATIONS[current_phase]
    name = user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞ –¥–µ–Ω—å
    message = (
        f"üå∏ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!\n\n"
        f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å {current_day} —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞ - {PHASES[current_phase]['description'].lower()} —Ñ–∞–∑–∞.\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ:\n{recommendations['–ø–∏—Ç–∞–Ω–∏–µ']}\n\n"
        f"üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n{recommendations['—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞']}\n\n"
        f"üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n{recommendations['–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ']}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞
    if current_phase == "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è" and current_day == 1:
        message += "\n\n‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–≤–æ–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö. –ë—É–¥—å –≥–æ—Ç–æ–≤–∞ –∏ –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ."
    elif current_phase == "–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è" and current_day == user_data['ovulation_day']:
        message += "\n\nü•ö –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ç–≤–æ–µ–π –æ–≤—É–ª—è—Ü–∏–∏."
    elif current_phase == "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è" and user_data['cycle_length'] - current_day <= 2:
        message += f"\n\n‚ö†Ô∏è –¢–≤–æ–∏ –º–µ—Å—è—á–Ω—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {user_data['cycle_length'] - current_day + 1} –¥–Ω—è. –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!"
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–º–µ—Ç–∫–µ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏
    message += "\n\nüîã –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è!"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(user_id, message)
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_daily_notifications(user_id, context):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_jobs = context.job_queue.get_jobs_by_name(f"daily_notification_{user_id}")
    for job in current_jobs:
        job.schedule_removal()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9:00 —É—Ç—Ä–∞)
    notification_time = time(9, 0, 0)  # 9:00 AM
    
    # –í—ã—á–∏—Å–ª—è–µ–º, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    now = datetime.now()
    target_time = datetime.combine(now.date(), notification_time)
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if now.time() >= notification_time:
        target_time = target_time + timedelta(days=1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    first_delay = (target_time - now).total_seconds()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    context.job_queue.run_repeating(
        send_daily_notification,
        interval=timedelta(days=1).total_seconds(),  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ 24 —á–∞—Å–∞
        first=first_delay,
        data={'user_id': user_id},
        name=f"daily_notification_{user_id}"
    )
    
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {first_delay/3600:.2f} —á–∞—Å–æ–≤")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def toggle_notifications(update: Update, context: CallbackContext) -> int:
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return MAIN_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled = user_data_dict[user_id].get('notifications_enabled', False)
    
    if notifications_enabled:
        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        current_jobs = context.job_queue.get_jobs_by_name(f"daily_notification_{user_id}")
        for job in current_jobs:
            job.schedule_removal()
            
        user_data_dict[user_id]['notifications_enabled'] = False
        await update.message.reply_text(
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        schedule_daily_notifications(user_id, context)
        user_data_dict[user_id]['notifications_enabled'] = True
        await update.message.reply_text(
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.",
            reply_markup=get_main_menu_keyboard()
        )
    
    return MAIN_MENU

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, AGE, LAST_PERIOD_DATE, PERIOD_DURATION, MAIN_MENU, ENERGY_LEVEL = range(6)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_dict = {}

# –§–∞–∑—ã —Ü–∏–∫–ª–∞ (–±—É–¥—É—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
PHASES = {
    "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è": {"description": "–ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞"},
    "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è": {"description": "–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞"},
    "–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è": {"description": "–û–≤—É–ª—è—Ü–∏—è"},
    "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è": {"description": "–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞"}
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
RECOMMENDATIONS = {
    "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è": {
        "–ø–∏—Ç–∞–Ω–∏–µ": "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–µ–ª–µ–∑–∞ (–∫—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ, —à–ø–∏–Ω–∞—Ç, —á–µ—á–µ–≤–∏—Ü–∞). –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–ª–µ–Ω–æ–π –ø–∏—â–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —É—Å–∏–ª–∏—Ç—å –≤–∑–¥—É—Ç–∏–µ.",
        "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞": "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –π–æ–≥–∞, –ø–∏–ª–∞—Ç–µ—Å, –ø—Ä–æ–≥—É–ª–∫–∏. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è —Å–µ–±–µ, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏ –≥–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
    },
    "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è": {
        "–ø–∏—Ç–∞–Ω–∏–µ": "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–µ–∂–∏—Ö —Ñ—Ä—É–∫—Ç–∞—Ö, –æ–≤–æ—â–∞—Ö –∏ –±–µ–ª–∫–∞—Ö. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω.",
        "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞": "–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å - –∫–∞—Ä–¥–∏–æ, —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –≠–Ω–µ—Ä–≥–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–∏–º.",
        "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π, –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. –í–∞—à –º–æ–∑–≥ –±–æ–ª–µ–µ –≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    },
    "–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è": {
        "–ø–∏—Ç–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –±–æ–≥–∞—Ç—ã–µ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–∞–º–∏. –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –∑–µ–ª–µ–Ω–∏, –æ—Ä–µ—Ö–æ–≤ –∏ —Å–µ–º—è–Ω.",
        "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞": "–ü–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∏ –Ω–æ–≤—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤.",
        "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    },
    "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è": {
        "–ø–∏—Ç–∞–Ω–∏–µ": "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—è –∏ –∫–∞–ª—å—Ü–∏—è (—Ç—ë–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥, –æ—Ä–µ—Ö–∏, –ª–∏—Å—Ç–æ–≤–∞—è –∑–µ–ª–µ–Ω—å). –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—è–≥–æ–π –∫ —Å–ª–∞–¥–∫–æ–º—É.",
        "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞": "–ü–æ –º–µ—Ä–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ —Å–Ω–∏–∂–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å. –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –π–æ–≥–∞ –∏ –ø–ª–∞–≤–∞–Ω–∏–µ.",
        "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É, —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–µ—Ä–µ–ø–∞–¥–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
    }
}

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    return NAME

async def get_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        user_data_dict[user_id] = {}
    
    user_data_dict[user_id]['name'] = update.message.text
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_data_dict[user_id]['name']}! "
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ)"
    )
    return AGE

async def get_age(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö."""
    user_id = update.message.from_user.id
    
    try:
        age = int(update.message.text)
        if age < 8 or age > 60:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 8 –¥–æ 60 –ª–µ—Ç)."
            )
            return AGE
        
        user_data_dict[user_id]['age'] = age
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏—Å—å —Ç–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ? "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025)"
        )
        return LAST_PERIOD_DATE
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º."
        )
        return AGE

async def get_last_period_date(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
    user_id = update.message.from_user.id
    
    try:
        date_str = update.message.text
        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
        
        if date_obj > datetime.now():
            await update.message.reply_text(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É."
            )
            return LAST_PERIOD_DATE
        
        user_data_dict[user_id]['last_period_date'] = date_obj
        
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–±—ã—á–Ω–æ –¥–ª—è—Ç—Å—è —Ç–≤–æ–∏ –º–µ—Å—è—á–Ω—ã–µ? (–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)"
        )
        return PERIOD_DURATION
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025)"
        )
        return LAST_PERIOD_DATE

async def get_period_duration(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Å—è—á–Ω—ã—Ö –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞."""
    user_id = update.message.from_user.id
    
    try:
        duration = int(update.message.text)
        if duration < 1 or duration > 10:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10."
            )
            return PERIOD_DURATION
        
        user_data_dict[user_id]['period_duration'] = duration
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–±—â–µ–π –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞
        await update.message.reply_text(
            "–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞ (–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—á–Ω—ã—Ö –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Å–ª–µ–¥—É—é—â–∏—Ö)? "
            "–û–±—ã—á–Ω–æ —ç—Ç–æ –æ—Ç 21 –¥–æ 35 –¥–Ω–µ–π. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ, –≤–≤–µ–¥–∏ 28."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞
        return CYCLE_LENGTH
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–º."
        )
        return PERIOD_DURATION

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞
CYCLE_LENGTH = 6  # –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

async def get_cycle_length(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.message.from_user.id
    
    try:
        cycle_length = int(update.message.text)
        if cycle_length < 21 or cycle_length > 45:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 21 –¥–æ 45. "
                "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –æ–±—ã—á–Ω–æ 28 –¥–Ω–µ–π."
            )
            return CYCLE_LENGTH
        
        user_data_dict[user_id]['cycle_length'] = cycle_length
        user_data_dict[user_id]['energy_logs'] = []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ
        next_period = user_data_dict[user_id]['last_period_date'] + timedelta(days=cycle_length)
        user_data_dict[user_id]['next_period_date'] = next_period
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å –æ–≤—É–ª—è—Ü–∏–∏
        ovulation_day = cycle_length - 14
        user_data_dict[user_id]['ovulation_day'] = ovulation_day
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        keyboard = [
            ['‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ']
        ]
        notification_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, {user_data_dict[user_id]['name']}!\n\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data_dict[user_id]['age']}\n"
            f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö: {user_data_dict[user_id]['last_period_date'].strftime('%d.%m.%Y')}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Å—è—á–Ω—ã—Ö: {user_data_dict[user_id]['period_duration']} –¥–Ω–µ–π\n"
            f"–î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: {cycle_length} –¥–Ω–µ–π\n"
            f"–û–≤—É–ª—è—Ü–∏—è: –ø—Ä–∏–º–µ—Ä–Ω–æ {ovulation_day}-–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞\n"
            f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö: {next_period.strftime('%d.%m.%Y')}\n\n"
            "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π —Ü–∏–∫–ª –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\n"
            "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏?",
            reply_markup=notification_markup
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return NOTIFICATION_SETUP
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞ —á–∏—Å–ª–æ–º."
        )
        return CYCLE_LENGTH
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
NOTIFICATION_SETUP = 7  # –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

async def setup_notifications(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    user_id = update.message.from_user.id
    message_text = update.message.text
    
    if message_text == '‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_data_dict[user_id]['notifications_enabled'] = True
        schedule_daily_notifications(user_id, context)
        
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
        user_data_dict[user_id]['notifications_enabled'] = False
        
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, —Ç—ã –º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'.",
            reply_markup=get_main_menu_keyboard()
        )
    
    return MAIN_MENU  
        

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        ['üìä –ú–æ—è —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞', 'üîã –û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏'],
        ['üìù –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞'],
        ['‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_energy_level_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏."""
    keyboard = [
        ['üî• 1', 'üî•üî• 2', 'üî•üî•üî• 3', 'üî•üî•üî•üî• 4', 'üî•üî•üî•üî•üî• 5'],
        ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def calculate_cycle_day(user_data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞."""
    today = datetime.now()
    days_since_period = (today - user_data['last_period_date']).days % user_data['cycle_length']
    return days_since_period + 1  # +1 —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –±—ã–ª 1, –∞ –Ω–µ 0

def determine_phase(day, user_data):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É —Ü–∏–∫–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è —Ü–∏–∫–ª–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    period_duration = user_data['period_duration']
    cycle_length = user_data['cycle_length']
    ovulation_day = user_data['ovulation_day']
    
    # –ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞: —Å 1-–≥–æ –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö
    if 1 <= day <= period_duration:
        return "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è"
    
    # –û–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è —Ñ–∞–∑–∞: –¥–µ–Ω—å –æ–≤—É–ª—è—Ü–∏–∏ –∏ –¥–µ–Ω—å –¥–æ/–ø–æ—Å–ª–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ 3 –¥–Ω—è)
    elif ovulation_day - 1 <= day <= ovulation_day + 1:
        return "–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è"
    
    # –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ø–æ—Å–ª–µ –º–µ—Å—è—á–Ω—ã—Ö –¥–æ –æ–≤—É–ª—è—Ü–∏–∏
    elif period_duration < day < ovulation_day - 1:
        return "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è"
    
    # –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: –ø–æ—Å–ª–µ –æ–≤—É–ª—è—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞
    else:
        return "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è"

def get_phase_info(user_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –≤—Å–µ—Ö —Ñ–∞–∑ —Ü–∏–∫–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    period_duration = user_data['period_duration']
    cycle_length = user_data['cycle_length']
    ovulation_day = user_data['ovulation_day']
    
    phases_info = {
        "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è": f"1-{period_duration} –¥–µ–Ω—å —Ü–∏–∫–ª–∞",
        "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è": f"1-{ovulation_day-1} –¥–µ–Ω—å —Ü–∏–∫–ª–∞",
        "–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è": f"{ovulation_day-1}-{ovulation_day+1} –¥–µ–Ω—å —Ü–∏–∫–ª–∞",
        "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è": f"{ovulation_day+2}-{cycle_length} –¥–µ–Ω—å —Ü–∏–∫–ª–∞"
    }
    
    return phases_info

async def show_current_phase(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ —Ü–∏–∫–ª–∞."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    user_data = user_data_dict[user_id]
    current_day = calculate_cycle_day(user_data)
    current_phase = determine_phase(current_day, user_data)
    phases_info = get_phase_info(user_data)
    
    days_to_next_period = user_data['cycle_length'] - current_day + 1
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä—ã—Ö –º–µ—Å—è—á–Ω—ã—Ö
    warning_message = ""
    if days_to_next_period <= 3 and current_phase == "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è":
        warning_message = "\n\n‚ö†Ô∏è –¢–≤–æ–∏ –º–µ—Å—è—á–Ω—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ " + \
                         f"{days_to_next_period} {'–¥–µ–Ω—å' if days_to_next_period == 1 else '–¥–Ω—è' if 2 <= days_to_next_period <= 4 else '–¥–Ω–µ–π'}. " + \
                         "–ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∏–ª–∏ —Ç–∞–º–ø–æ–Ω—ã!"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –æ–≤—É–ª—è—Ü–∏–∏
    ovulation_message = ""
    ovulation_day = user_data['ovulation_day']
    days_to_ovulation = ovulation_day - current_day
    
    if current_phase == "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è" and 1 <= days_to_ovulation <= 3:
        ovulation_message = f"\n\nü•ö –û–≤—É–ª—è—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days_to_ovulation} " + \
                           f"{'–¥–µ–Ω—å' if days_to_ovulation == 1 else '–¥–Ω—è' if 2 <= days_to_ovulation <= 4 else '–¥–Ω–µ–π'}."
    
    await update.message.reply_text(
        f"üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ü–∏–∫–ª–∞:\n\n"
        f"üóìÔ∏è –î–µ–Ω—å —Ü–∏–∫–ª–∞: {current_day} –∏–∑ {user_data['cycle_length']}\n"
        f"üåÄ –§–∞–∑–∞: {PHASES[current_phase]['description']}\n"
        f"‚ÑπÔ∏è –§–∞–∑—ã —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞:\n"
        f"- –ú–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è: {phases_info['–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è']}\n"
        f"- –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è: {phases_info['—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è']}\n"
        f"- –û–≤—É–ª—è—Ü–∏—è: {phases_info['–æ–≤—É–ª—è—Ç–æ—Ä–Ω–∞—è']}\n"
        f"- –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è: {phases_info['–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è']}\n\n"
        f"üìÖ –°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ –æ–∂–∏–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ {days_to_next_period} " + 
        f"{'–¥–µ–Ω—å' if days_to_next_period == 1 else '–¥–Ω—è' if 2 <= days_to_next_period <= 4 else '–¥–Ω–µ–π'}" +
        warning_message + ovulation_message,
        reply_markup=get_main_menu_keyboard()
    )
    
    return MAIN_MENU

async def start_energy_log(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Ç 1 –¥–æ 5 –æ–≥–æ–Ω—å–∫–æ–≤:",
        reply_markup=get_energy_level_keyboard()
    )
    
    return ENERGY_LEVEL

async def log_energy_level(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    message_text = update.message.text
    
    if message_text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏
    energy_mapping = {
        'üî• 1': 1,
        'üî•üî• 2': 2,
        'üî•üî•üî• 3': 3,
        'üî•üî•üî•üî• 4': 4,
        'üî•üî•üî•üî•üî• 5': 5
    }
    
    if message_text in energy_mapping:
        energy_level = energy_mapping[message_text]
        today = datetime.now().date()
        current_day = calculate_cycle_day(user_data_dict[user_id])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data_dict[user_id]['energy_logs'].append({
            'date': today,
            'cycle_day': current_day,
            'energy_level': energy_level
        })
        
        current_phase = determine_phase(current_day, user_data_dict[user_id])
        
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {message_text}\n"
            f"–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {PHASES[current_phase]['description']}\n"
            "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π —Ü–∏–∫–ª!",
            reply_markup=get_main_menu_keyboard()
        )
        
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç 1 –¥–æ 5 –æ–≥–æ–Ω—å–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_energy_level_keyboard()
        )
        
        return ENERGY_LEVEL

async def show_recommendations(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    user_data = user_data_dict[user_id]
    current_day = calculate_cycle_day(user_data)
    current_phase = determine_phase(current_day, user_data)
    
    recommendations = RECOMMENDATIONS[current_phase]
    
    await update.message.reply_text(
        f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {PHASES[current_phase]['description'].lower()} (–¥–µ–Ω—å {current_day}):\n\n"
        f"üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ:\n{recommendations['–ø–∏—Ç–∞–Ω–∏–µ']}\n\n"
        f"üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n{recommendations['—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–Ω–∞–≥—Ä—É–∑–∫–∞']}\n\n"
        f"üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n{recommendations['–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ']}",
        reply_markup=get_main_menu_keyboard()
    )
    
    return MAIN_MENU

async def show_cycle_statistics(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    user_data = user_data_dict[user_id]
    energy_logs = user_data.get('energy_logs', [])
    
    if not energy_logs:
        await update.message.reply_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± —É—Ä–æ–≤–Ω–µ —ç–Ω–µ—Ä–≥–∏–∏. "
            "–û—Ç–º–µ—á–∞–π —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–Ω–µ—Ä–≥–∏–∏
    avg_energy = sum(log['energy_level'] for log in energy_logs) / len(energy_logs)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
    phase_energy = {phase: [] for phase in PHASES.keys()}
    for log in energy_logs:
        day = log['cycle_day']
        phase = determine_phase(day, user_data)
        phase_energy[phase].append(log['energy_level'])
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    phase_avg_energy = {}
    for phase, levels in phase_energy.items():
        if levels:
            phase_avg_energy[phase] = sum(levels) / len(levels)
        else:
            phase_avg_energy[phase] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    phase_info = ""
    for phase, avg in phase_avg_energy.items():
        if avg != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
            fire_emoji = "üî•" * round(avg)
            phase_info += f"{PHASES[phase]['description']}: {fire_emoji} ({avg:.1f}/5)\n"
        else:
            phase_info += f"{PHASES[phase]['description']}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞:\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(energy_logs)}\n"
        f"–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {avg_energy:.1f}/5\n\n"
        f"–≠–Ω–µ—Ä–≥–∏—è –ø–æ —Ñ–∞–∑–∞–º:\n{phase_info}",
        reply_markup=get_main_menu_keyboard()
    )
    
    return MAIN_MENU

async def change_settings(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–∞."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/update_period - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö\n"
        "/update_duration - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Å—è—á–Ω—ã—Ö\n"
        "/update_cycle - –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—â—É—é –¥–ª–∏–Ω—É —Ü–∏–∫–ª–∞",
        reply_markup=get_main_menu_keyboard()
    )
    
    return MAIN_MENU

async def handle_menu_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user_id = update.message.from_user.id
    message_text = update.message.text
    
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    if message_text == 'üìä –ú–æ—è —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞':
        return await show_current_phase(update, context)
    elif message_text == 'üîã –û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏':
        return await start_energy_log(update, context)
    elif message_text == 'üìù –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        return await show_recommendations(update, context)
    elif message_text == 'üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞':
        return await show_cycle_statistics(update, context)
    elif message_text == '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        return await change_settings(update, context)
    elif message_text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        return await toggle_notifications(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def update_period_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—á–Ω—ã—Ö."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏—Å—å —Ç–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ? "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2025)"
    )
    return LAST_PERIOD_DATE

async def update_duration_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Å—è—á–Ω—ã—Ö."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–±—ã—á–Ω–æ –¥–ª—è—Ç—Å—è —Ç–≤–æ–∏ –º–µ—Å—è—á–Ω—ã–µ? (–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)"
    )
    return PERIOD_DURATION

async def update_cycle_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–π –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞."""
    user_id = update.message.from_user.id
    if user_id not in user_data_dict:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞ (–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—á–Ω—ã—Ö –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Å–ª–µ–¥—É—é—â–∏—Ö)? "
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –æ—Ç 21 –¥–æ 35 –¥–Ω–µ–π."
    )
    return CYCLE_LENGTH

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("7712191325:AAFeVf-Vk2tm0Zfm6D9EeSKsGlZ04H2QN9c").build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            LAST_PERIOD_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_last_period_date)],
            PERIOD_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_period_duration)],
            CYCLE_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_cycle_length)],
            NOTIFICATION_SETUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_notifications)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_selection)],
            ENERGY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_energy_level)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("update_period", update_period_command))
    application.add_handler(CommandHandler("update_duration", update_duration_command))
    application.add_handler(CommandHandler("update_cycle", update_cycle_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("notifications", toggle_notifications))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()